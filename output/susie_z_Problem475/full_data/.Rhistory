library(lme4)
potuse$sex = factor(potuse$sex)
potuse$year.76 = factor(potuse$year.76)
potuse$year.77 = factor(potuse$year.77)
potuse$year.78 = factor(potuse$year.78)
potuse$year.79 = factor(potuse$year.79)
potuse$year.80 = factor(potuse$year.80)
year76 = aggregate(count~sex+year.76, data = potuse, sum)
year76$year = 76; year76$catg = year76$year.76
year76 = year76[,-2]
year77 = aggregate(count~sex+year.77, data = potuse, sum)
year77$year = 77; year77$catg = year77$year.77
year77 = year77[,-2]
year78 = aggregate(count~sex+year.78, data = potuse, sum)
year78$year = 78; year78$catg = year78$year.78
year78 = year78[,-2]
year79 = aggregate(count~sex+year.79, data = potuse, sum)
year79$year = 79; year79$catg = year79$year.79
year79 = year79[,-2]
year80 = aggregate(count~sex+year.80, data = potuse, sum)
year80$year = 80; year80$catg = year80$year.80
year80 = year80[,-2]
yearaggre = rbind(year76, year77, year78, year79, year80)
ggplot(yearaggre, aes(x = year, y = count, group = catg, color = catg)) + geom_point() + facet_wrap(. ~ sex)
subject = rep(1:sum(potuse$count), each=5)
year = rep(c(76,77,78,79,80),sum(potuse$count))
sex = c(rep(1,116*5), rep(2, 120*5))
use = c(); severe = c()
for(i in 1:486){
c = potuse$count[i]
if (c != 0){
u = c(potuse$year.76[i], potuse$year.77[i],potuse$year.78[i],
potuse$year.79[i],potuse$year.80[i])
us = (u != 1)
use = c(use, rep(us, c))
severe = c(severe, rep(u,c))
}
}
use = as.numeric(use)
data = data.frame(subject=subject, year = year - 76, sex=sex, use=use, severe=severe )
m1 = glmer(use~factor(sex)*year+(year|subject), data, family = binomial)
summary(m1)
m2 = glmer(use~year+(year|subject), data, family = binomial)
summary(m2)
library(pbkrtest)
KRmodcomp(m1,m2)
anova(m1, m2)
m1 = glmer(use~factor(sex)*year+(1|subject), data, family = binomial)
summary(m1)
m2 = glmer(use~year+(1|subject), data, family = binomial)
summary(m2)
anova(m1, m2)
m3 = glmer(use~factor(year) + (1|subject), data, family = binomial)
summary(m3)
m3 = glmer(use~(factor(year)|subject), data, family = binomial)
summary(m3)
m3 = glmer(use~(factor(year)-1|subject)-1, data, family = binomial)
summary(m3)
m3 = glmer(use~factor(year) + (1|subject), data, family = binomial)
summary(m3)
m3 = glmer(use~factor(sex) + factor(year) + (1|subject), data, family = binomial)
summary(m3)
subject = rep(1:sum(potuse$count), each=5)
year = rep(c(76,77,78,79,80),sum(potuse$count))
sex = c(rep(1,116*5), rep(2, 120*5))
use = c(); severe = c()
for(i in 1:486){
c = potuse$count[i]
if (c != 0){
u = c(potuse$year.76[i], potuse$year.77[i],potuse$year.78[i],
potuse$year.79[i],potuse$year.80[i])
us = (u != 1)
use = c(use, rep(us, c))
severe = c(severe, rep(u,c))
}
}
use = as.numeric(use)
data = data.frame(subject=subject, year = year - 76, sex=sex, use=use, severe=severe )
data$sex = factor(data$sex)
m1 = glmer(use~factor(sex)*year+(year|subject), data, family = binomial)
summary(m1)
m1 = glmer(use~factor(sex) + year+(year|subject), data, family = binomial)
summary(m1)
m2 = glmer(use~year+(year|subject), data, family = binomial)
summary(m2)
anova(m1, m2)
m3 = glmer(use~ sex + factor(year) + (factor(year)|subject), data, family = binomial)
m3 = glmer(use~ sex + factor(year) + (1|subject), data, family = binomial)
summary(m3)
SAheart <- read.csv("~/Google Drive/UChicago_Courses/STAT347/HW7/SAheart.data")
library(splines)
names=names(SAheart)
# Keep only the names of the variables we want to use.
names = names[c(2,3,4,6,8,9,10)]
names=names[-c(4,6)]
names
head(SAheart)
SAheart <- read.csv("~/Google Drive/UChicago_Courses/STAT347/HW7/SAheart.data")
library(splines)
names=names(SAheart)
# Keep only the names of the variables we want to use.
names = names[c(2,3,4,6,8,9,10)]
names=names[-c(4,6)]
# Number of knots-1 for creating the natural spline basis for
# variable
nosp=4
# Keep the 5 bases in a list for future ease of use.
aa=list()
aa[[1]]=ns(SAheart$sbp,nosp)
aa[[2]]=ns(SAheart$tobacco,nosp)
aa[[3]]=ns(SAheart$ldl,nosp)
aa[[4]]=ns(SAheart$obesity,nosp)
aa[[5]]=ns(SAheart$age,nosp)
# Keep the sorted values of each variable in a list for future use
ii=list()
ii[[1]]=sort.int(SAheart$sbp,index.return=TRUE)
ii[[2]]=sort.int(SAheart$tobacco,index.return=TRUE)
ii[[3]]=sort.int(SAheart$ldl,index.return=TRUE)
ii[[4]]=sort.int(SAheart$obesity,index.return=TRUE)
ii[[5]]=sort.int(SAheart$age,index.return=TRUE)
mod=glm(chd~famhist+sbp+tobacco+ldl+obesity+age,data=SAheart,family=binomial)
summary(mod)
# Fit the response to the 5 blocks of variables.
mods=glm(SAheart$chd~SAheart$famhist+aa[[1]]+aa[[2]]+aa[[3]]+aa[[4]]+aa[[5]],family=binomial)
summary(mods)
mods$coefficients
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
Y[1:5,1] = NA
Y[7:10,2] = NA
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) 1/diag(X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = M[,r] * M[,d]
S[[j]][r,d] = sum(X[common, j]^2)/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
S
cov2cor(S[[1]])
cov2cor(S[[2]])
cov2cor(S[[3]])
Y = matrix(rnorm(20), 10,2)
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) 1/diag(X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = M[,r] * M[,d]
S[[j]][r,d] = sum(X[common, j]^2)/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
S
cov2cor(S[[1]])
cov2cor(S[[2]])
Y
S
M
X
X.c = susieR:::set_X_attributes(X, center = T, scale = F)
missing.data = function(X, Y){
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) 1/diag(X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = M[,r] * M[,d]
S[[j]][r,d] = sum(X[common, j]^2)/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
return(list(S=S, bhat=bhat))
}
a = missing.data(X.c, Y)
a$S
missing.data = function(X, Y){
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) 1/diag(X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = M[,r] * M[,d]
S[[j]][r,d] = sum(X[common, j]^2)/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
return(list(S=S, bhat=bhat))
}
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
X.c = susieR:::set_X_attributes(X, scale = F)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
p = c(0.1,0.2,0.7)
1- prod(1-p)
missing.data = function(X, Y){
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) 1/diag(X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = M[,r] * M[,d]
S[[j]][r,d] = sum(X[common,j])/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
return(list(S=S, bhat=bhat))
}
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
X
Y
sum(X[,1]^2)
a$S[[1]]
sum(X.c[,1]^2)
1/9
X = X.c
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
M
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
Xty
X.c %*% Y
crossprod(X.c, Y)
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
X2
S = lapply(1:J, function(j) 1/diag(X2[j,]) )
S
S = lapply(1:J, function(j) diag(1/X2[j,]) )
S
j=1
r=1
d=2
R
common = M[,r] * M[,d]
common
X[common,j]
X[,j] * common
missing.data = function(X, Y){
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) diag(1/X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = M[,r] * M[,d]
S[[j]][r,d] = sum((X[,j] * common)^2)/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
return(list(S=S, bhat=bhat))
}
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
Y[1:5,1] = NA
Y[6:10,2] = NA
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
Y[1:5,1] = NA
Y[7:10,2] = NA
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
Y[1:5,1] = NA
Y[7:10,2] = NA
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
missing.data = function(X, Y){
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) diag(1/X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = M[,r] * M[,d]
S[[j]][r,d] = sum((X[,j] * common)^2)/(X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
return(list(S=S, bhat=bhat))
}
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
Y[1:5,1] = NA
Y[7:10,2] = NA
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
as.logical(1)
missing.data = function(X, Y){
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
X.c = lapply(1:R, function(r) susieR:::set_X_attributes(X[M[,r],]) )
Xty = sapply(1:R, function(r) crossprod(X.c[[r]], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X.c[[r]]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) diag(1/X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = as.logical(M[,r] * M[,d])
S[[j]][r,d] = sum(X.c[[r]][1,j] * X.c[[d]][6,j] )/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
return(list(S=S, bhat=bhat))
}
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
Y[1:5,1] = NA
Y[7:10,2] = NA
a = missing.data(X, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
missing.data = function(X, Y){
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) diag(1/X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = as.logical(M[,r] * M[,d])
S[[j]][r,d] = sum((X[common,j])^2)/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
return(list(S=S, bhat=bhat))
}
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
Y[1:5,1] = NA
Y[7:10,2] = NA
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
missing.data = function(X, Y){
J = ncol(X)
R = ncol(Y)
M = !is.na(Y)
Xty = sapply(1:R, function(r) crossprod(X[M[,r],], Y[M[,r],r]) ) # J by R
X2 = sapply(1:R, function(r) colSums(X[M[,r],]^2 )) # J by R
bhat = Xty/X2
S = lapply(1:J, function(j) diag(1/X2[j,]) )
for(j in 1:J){
for(r in 1:(R-1)){
for(d in (r+1):R){
common = as.logical(M[,r] * M[,d])
S[[j]][r,d] = sum((X[common,j])^2)/(X2[j,r]*X2[j,d])
S[[j]][d,r] = S[[j]][r,d]
}
}
}
return(list(S=S, bhat=bhat))
}
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
Y[1:5,1] = NA
Y[7:10,2] = NA
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
set.seed(1)
X = matrix(rnorm(30), 10, 3)
Y = matrix(rnorm(20), 10, 2)
X.c = susieR:::set_X_attributes(X)
a = missing.data(X.c, Y)
a$S
cov2cor(a$S[[1]])
cov2cor(a$S[[2]])
R = matrix(0.5,3,3)
diag(R) = 1
R
qr(R)
R = R[,1:@]
R = R[,1:2]
R
solve(R)
qr.solve(R)
ginv(R)
library(MASS)
ginv(R)
A = matrix(1,3,3)
b = c(2,2,2)
A%*%solve(crossprod(A)) %*% crossprod(A, b)
eigenR = eigen(R)
R = matrix(1,3,3)
eigenR = eigen(R)
A = eigenR$vectors[,eigenR$values!=0]
b = c(2,2,2)
A%*%solve(crossprod(A)) %*% crossprod(A, b)
b = c(2,2,2.1)
A%*%solve(crossprod(A)) %*% crossprod(A, b)
A
R
A
b
eigenR$values
qr.solve(A,b)
A%*%solve(crossprod(A)) %*% crossprod(A, b)
file(ld)
getwd()
setwd('Documents/GitHub/dsc-finemap/output/susie_z_Problem475/')
setwd('full_data/')
file('full_data_1.ld_file.ld')
